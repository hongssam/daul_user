<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="egovframework.com.user.mapper.UserMapper">
	
	<insert id="saveUserLog">
		INSERT INTO daul.user_log
			 (
			   user_id
			 , reg_date
			 , ip
			 , requestURI
			 )
 		VALUES
 		     (
 		       #{user_id}
 		     , sysdate()
 		     , #{ip}
 		     , #{requestURI}
 		     )
	
	</insert>
	
	<select id="selectKakaoAccount" resultType="int">
		SELECT COUNT(*)
		  FROM daul.user
		 WHERE phone = #{phone}
		   AND kakao_key = #{id}
	</select>
	
	<insert id="insertKakaoUser">
		INSERT INTO daul.user
			 (
			   user_id
			 , name
			 , pw
			 , phone
			 , reg_date
			 , last_login_date
			 <if test="@egovframework.com.cmmn.util.StringUtil@isNotEmpty(email_chk)">
			 , email_chk 
			 </if>
			 <if test="@egovframework.com.cmmn.util.StringUtil@isNotEmpty(talk_chk)">
			 , talk_chk 
			 </if>
			 <if test="@egovframework.com.cmmn.util.StringUtil@isNotEmpty(sms_chk)">
			 , sms_chk 
			 </if>
			 , auth_type
			 , kakao_key
			 )
		VALUES 
			 (
			   #{user_id}
			 , #{name}
			 , #{pw}
			 , #{phone}
			 , SYSDATE()
			 , SYSDATE()
			 <if test="@egovframework.com.cmmn.util.StringUtil@isNotEmpty(email_chk)">
			 , #{email_chk} 
			 </if>
			 <if test="@egovframework.com.cmmn.util.StringUtil@isNotEmpty(talk_chk)">
			 , #{talk_chk} 
			 </if>
			 <if test="@egovframework.com.cmmn.util.StringUtil@isNotEmpty(sms_chk)">
			 , #{sms_chk} 
			 </if>
			 , #{auth_type}
			 , #{kakao_key}
			 )
	</insert>
	
	<select id="selectUserIdCheck" resultType="int">
		SELECT COUNT(*)
		  FROM daul.user
		 WHERE user_id = #{user_id}
	</select>
	
	<insert id="insertPublicUser">
		INSERT INTO daul.user
			 (
			   user_id
			 , name
			 , pw
			 , phone
			 , reg_date
			 , last_login_date
			 <if test="@egovframework.com.cmmn.util.StringUtil@isNotEmpty(email_chk)">
			 , email_chk 
			 </if>
			 <if test="@egovframework.com.cmmn.util.StringUtil@isNotEmpty(talk_chk)">
			 , talk_chk 
			 </if>
			 <if test="@egovframework.com.cmmn.util.StringUtil@isNotEmpty(sms_chk)">
			 , sms_chk 
			 </if>
			 , auth_type
			 , user_key
			 )
		VALUES 
			 (
			   #{user_id}
			 , #{name}
			 , #{pw}
			 , #{phone}
			 , SYSDATE()
			 , SYSDATE()
			 <if test="@egovframework.com.cmmn.util.StringUtil@isNotEmpty(email_chk)">
			 , #{email_chk} 
			 </if>
			 <if test="@egovframework.com.cmmn.util.StringUtil@isNotEmpty(talk_chk)">
			 , #{talk_chk} 
			 </if>
			 <if test="@egovframework.com.cmmn.util.StringUtil@isNotEmpty(sms_chk)">
			 , #{sms_chk} 
			 </if>
			 , #{auth_type}
			 , #{dupInfo}
			 )
	</insert>
	
	<select id="selectUser" resultType="egovframework.com.user.vo.UserVo">
		SELECT user_id
		     , name
		     , pw
		     , email
		     , phone
		     , channel
		     , DATE_FORMAT(reg_date, '%Y-%m-%d')		as reg_date
     		 , DATE_FORMAT(last_login_date, '%Y-%m-%d') as last_login_date
		     , email_chk
		     , talk_chk
		     , sms_chk
		     , auth_type
		     , user_key
		  FROM daul.user
		 WHERE user_id = #{user_id}
	</select>
	
	<update id="updateUser">
		UPDATE daul.user
		   SET user_id = #{user_id}
		     <if test="@egovframework.com.cmmn.util.StringUtil@isNotEmpty(pw)">
		     , pw = #{pw}
		     </if>
		     <if test="@egovframework.com.cmmn.util.StringUtil@isNotEmpty(name)">
		     , name = #{name}
		     </if>
		     <if test="@egovframework.com.cmmn.util.StringUtil@isNotEmpty(email)">
		     , email = #{email}
		     </if>
		     <if test="@egovframework.com.cmmn.util.StringUtil@isNotEmpty(email_chk)">
		     , email_chk = #{email_chk}
		     </if>
		     <if test="@egovframework.com.cmmn.util.StringUtil@isNotEmpty(talk_chk)">
		     , talk_chk = #{talk_chk}
		     </if>
		     <if test="@egovframework.com.cmmn.util.StringUtil@isNotEmpty(sms_chk)">
		     , sms_chk = #{sms_chk}
		     </if>
		 WHERE user_id = #{user_id}
	</update>
	
	<sql id="whereBySuggestion">
		<if test="@egovframework.com.cmmn.util.StringUtil@equals(search_type, 'title')">
			AND title like concat('%', #{search}, '%')
		</if>
	</sql>
	
	<select id="selectSuggestionListCntByMypage" resultType="int">
		SELECT COUNT(*) 
		  FROM (
		  		SELECT sm.*
		  		     , CASE WHEN (like_count / 50 * 100) >= 100 THEN 100 ELSE (like_count / 50 * 100) END AS like_per
		  		  FROM (
						SELECT suggestion_idx
							 , title
							 , content
							 , (SELECT COUNT(*) FROM daul.user_like where parent_idx = s.suggestion_idx) AS like_count
							 , create_user
							 , DATE_FORMAT(create_date, '%Y-%m-%d') as create_date
							 , (SELECT count(*) FROM suggestion_opinion a WHERE a.suggestion_idx = s.suggestion_idx) AS opinion_cnt
						  FROM suggestion_main s
						 WHERE del_chk != 'Y'
						   AND create_user = #{create_user}
						   <include refid="whereBySuggestion"/>
		  		  	   ) sm
		       ) sub
	</select>
	
	<select id="selectSuggestionListByMypage" resultType="egovframework.com.suggestion.vo.SuggestionVo">
		SELECT @rownum:=@rownum+1 AS num
  		     , sub.suggestion_idx
  		     , sub.title
  		     , sub.content
  		     , sub.like_count
  		     , sub.create_user
  		     , DATE_FORMAT(sub.create_date, '%Y-%m-%d %H:%i:%s') as create_date
  		     , sub.opinion_cnt
  		     , sub.like_per
  		     , sub.name
		  FROM (
		  		SELECT sm.*
		  		     , CASE WHEN (like_count / 50 * 100) >= 100 THEN 100 ELSE (like_count / 50 * 100) END AS like_per
		  		  FROM (
						SELECT suggestion_idx
							 , title
							 , content
							 , (SELECT COUNT(*) FROM daul.user_like where parent_idx = s.suggestion_idx) AS like_count
							 , create_user
							 , create_date
							 , (SELECT count(*) FROM suggestion_opinion a WHERE a.suggestion_idx = s.suggestion_idx) AS opinion_cnt
							 , u.name
						  FROM suggestion_main s
						  LEFT JOIN daul.user u ON u.user_id = s.create_user
						 WHERE del_chk != 'Y'
						   AND create_user = #{create_user}
						   <include refid="whereBySuggestion"/>
		  		  	   ) sm
		  		 ORDER BY sm.create_date
		       ) sub
		     , (SELECT @rownum:=0) TMP
		 ORDER BY num DESC
		 LIMIT #{startIndex}, #{pageSize}
	</select>
	
	<sql id="whereBySurvey">
		<if test="@egovframework.com.cmmn.util.StringUtil@equals(search_type, 'title')">
			 AND sm.title like concat('%', #{search}, '%')
		</if>
		<if test="@egovframework.com.cmmn.util.StringUtil@equals(search_type, 'create_user')">
			 AND u.name like concat('%', #{search}, '%')
		</if>
	</sql>
	
	<select id="selectSurveyListCntByMypage" resultType="int">
		SELECT COUNT(*)
		  FROM survey_main sm
		  LEFT JOIN daul.user u ON u.user_id = sm.create_user
		 INNER JOIN (
		  			 SELECT survey_idx 
		  			   FROM daul.survey_participation 
		  			  WHERE participation_user = #{create_user} 
		  			  GROUP BY survey_idx
		  			) sp ON sp.survey_idx = sm.survey_idx
		  	 , (SELECT @rownum:=0) TMP
		 WHERE sm.del_chk != 'Y'
		 <include refid="whereBySurvey"/>
	</select>
	
	<select id="selectSurveyListByMypage" resultType="egovframework.com.survey.vo.SurveyVo">
		SELECT @rownum:=@rownum+1 					AS num
			 , sm.survey_idx
		     , sm.title
		     , sm.content
		     , DATE_FORMAT(sm.s_date, '%Y-%m-%d')	AS s_date
		     , DATE_FORMAT(sm.e_date, '%Y-%m-%d')	AS e_date
		     , sm.create_user
		     , (SELECT COUNT(*) FROM survey_opinion WHERE survey_idx = sm.survey_idx )			AS opinion_cnt
		     , (SELECT COUNT(*) FROM survey_participation WHERE survey_idx = sm.survey_idx )	AS participation_count
		     <![CDATA[
		     , (CASE WHEN e_date < SYSDATE() 					   THEN '투표완료'
		 		    WHEN s_date > SYSDATE() 					   THEN '투표전'
			 	    WHEN e_date > SYSDATE() AND SYSDATE() > s_date THEN '투표중'
			    END) AS ing
			 ]]>
		  FROM survey_main sm
		  LEFT JOIN daul.user u ON u.user_id = sm.create_user
		 INNER JOIN (
		  			 SELECT survey_idx 
		  			   FROM daul.survey_participation 
		  			  WHERE participation_user = #{create_user} 
		  			  GROUP BY survey_idx
		  			) sp ON sp.survey_idx = sm.survey_idx
		  	 , (SELECT @rownum:=0) TMP
		 WHERE sm.del_chk != 'Y'
		 <include refid="whereBySurvey"/>
		 LIMIT #{startIndex}, #{pageSize}
	</select>
	
	<sql id="whereByContest">
		<if test="@egovframework.com.cmmn.util.StringUtil@equals(search_type, 'title')">
			 AND ca.title like concat('%', #{search}, '%')
		</if>
		<if test="@egovframework.com.cmmn.util.StringUtil@equals(search_type, 'create_user')">
			 AND u.name like concat('%', #{search}, '%')
		</if>
	</sql>
	
	<select id="selectContestListCntByMypage" resultType="int">
		SELECT COUNT(*)
		  FROM daul.contest_admin ca
		  LEFT JOIN daul.user u ON u.user_id = ca.create_user
		 INNER JOIN (
		 			 SELECT admin_contest_idx
		 			   FROM daul.contest_user
					  WHERE create_user = #{create_user}
					  GROUP BY admin_contest_idx
		 			) cu ON cu.admin_contest_idx = ca.admin_contest_idx
		     , (SELECT @rownum:=0) TMP
		 WHERE ca.del_chk != 'Y'
		 <include refid="whereByContest"/>
		 LIMIT #{startIndex}, #{pageSize}
	</select>
	
	<select id="selectContestListByMypage" resultType="egovframework.com.contest.vo.ContestVo">
		SELECT @rownum:=@rownum+1 							AS num
		     , ca.admin_contest_idx
		     , ca.title
		     , ca.content
		     , DATE_FORMAT(ca.contest_s_date, '%Y-%m-%d')	AS contest_s_date
		     , DATE_FORMAT(ca.contest_e_date, '%Y-%m-%d')	AS contest_e_date
		     , DATE_FORMAT(ca.submit_s_date, '%Y-%m-%d')	AS submit_s_date
		     , DATE_FORMAT(ca.submit_e_date, '%Y-%m-%d')	AS submit_e_date
		     , ca.create_user
		     , (SELECT count(*) FROM contest_user WHERE admin_contest_idx = ca.admin_contest_idx)	AS user_contest_cnt
		     <![CDATA[
		     , (CASE WHEN contest_e_date < SYSDATE() 								THEN '공모종료'
		             WHEN contest_s_date > SYSDATE() 								THEN '공모전'
		             WHEN contest_e_date > SYSDATE() AND SYSDATE() > contest_s_date THEN '공모진행중'
		        END) AS ing
		     ]]>
		  FROM daul.contest_admin ca
		  LEFT JOIN daul.user u ON u.user_id = ca.create_user
		 INNER JOIN (
		 			 SELECT admin_contest_idx
		 			   FROM daul.contest_user
					  WHERE create_user = #{create_user}
					  GROUP BY admin_contest_idx
		 			) cu ON cu.admin_contest_idx = ca.admin_contest_idx
		     , (SELECT @rownum:=0) TMP
		 WHERE ca.del_chk != 'Y'
		 <include refid="whereByContest"/>
		 LIMIT #{startIndex}, #{pageSize}
	</select>
	
	<select id="checkUserDi"  resultType="egovframework.com.user.vo.UserVo">
		SELECT user_id
			 , name
		  FROM user
		 WHERE user_key = #{user_di}
	</select>
	
	<update id="changeNewPw2">
		UPDATE user SET pw = #{pw}
		 WHERE user_id = #{user_id}
	</update>
	
	<update id="changeNewPw">
		UPDATE user SET pw = #{pw}
		 WHERE user_key = #{user_di}
	</update>
	
	<select id="chkKakaoKey" resultType="int">
		SELECT count(*) 
		  FROM user 
		 WHERE kakaochannel_key = #{user_key}
	</select>
	
	<update id="connectKakao">
		UPDATE user SET kakaochannel_key = #{userchannel_key}
		 WHERE phone = #{phone}
	</update>
	
	<select id="chkPhoneNum" resultType="int">
		SELECT count(*) 
		  FROM user 
		 WHERE phone = #{phone}
	</select>
	
	<select id="selectCheckUserPhone" resultType="int">
		SELECT COUNT(*)
		  FROM daul.user
		 WHERE phone = #{phone}
	</select>

	<select id="selectCheckUserDiPhone" resultType="int">
		SELECT COUNT(*)
		  FROM daul.user
		 WHERE phone = #{mobileNo}
		   AND user_key = #{dupInfo}
	</select>
	
	<update id="updatePublicUser">
		UPDATE daul.user
		   SET user_id = #{user_id}
		     , pw = #{pw}
		     , name = #{name}
		     , user_key = #{dupInfo}
		 WHERE phone = #{phone}  
	</update>
	
	<select id="selectCheckUserKakaokeyPhone" resultType="int">
		SELECT COUNT(*)
		  FROM daul.user
		 WHERE phone = #{phone}
		   AND kakao_key = #{kakao_key}
	</select>
	
	<update id="updateKakaoUser">
		UPDATE daul.user
		   SET kakao_key = #{kakao_key}
		 WHERE phone = #{phone}
	</update>
	
	<select id="getUserNotificationYN" resultType="String">
		SELECT talk_chk 
		  FROM daul.user
		 WHERE phone=#{phone}
	</select>
	
	<select id="getActionYN" resultType="String">
		SELECT on_off 
		  FROM daul.notification_talk
		 WHERE action_id=#{action_id}
	</select>
	
	<select id="getTmpNum" resultType="String">
		SELECT template_id 
		  FROM notification_talk
		 WHERE action_id = #{action_id}
	</select>
	
	<select id="getUserNotificationYN2" resultType="String">
		SELECT talk_chk 
		  FROM daul.user
		 WHERE user_id = (
							SELECT create_user 
						  	  FROM suggestion_main 
						 	 WHERE suggestion_idx = #{suggestion_idx}
	 					)
	</select>
	
	<select id="getNotificationVo" resultType="egovframework.com.cmmn.NotificationVo">
		SELECT name, phone, talk_chk
		  FROM daul.user
		 WHERE user_id = (
							SELECT create_user 
						  	  FROM suggestion_main 
						 	 WHERE suggestion_idx = #{suggestion_idx}
	 					)
	</select>
	
	<select id="getAuth" resultType="String">
		SELECT CASE 
				WHEN auth_type = 'pro'
				THEN '전문가'
				WHEN auth_type = 'public'
				THEN '일반사용자'
				WHEN auth_type = 'admin'
				THEN '관리자'
			ELSE ''
			END AS auth
		FROM user 
		WHERE user_id = #{create_user}
	</select>
	
</mapper>